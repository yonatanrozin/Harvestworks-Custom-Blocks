{"version":3,"file":"event-calendar/view.js","mappings":"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","sources":["webpack://harvestworks/./src/event-calendar/view.js"],"sourcesContent":["/* eslint-disable no-console */\n\nconst debug = true;\n\n\n// Utils\nfunction dateToStr(date) {\n    return date.toISOString().split(\"T\")[0].split(\"-\").join(\"\");\n}\n\nfunction strToDate(str) {\n    const year = str.substring(0, 4);\n    const month = str.substring(4, 6);\n    const day = str.substring(6, 8);\n    return new Date(year, month - 1, day);\n}\n\nfunction offsetOfMonth(dateStr) {\n    const year = dateStr.substring(0, 4);\n    const month = dateStr.substring(4, 6) - 1;\n    return new Date(year, month, 1).getDay() + 1;\n}\n\nfunction daysInMonth(dateStr) {\n    const year = dateStr.substring(0, 4);\n    const month = dateStr.substring(4, 6) - 1;\n    return new Date(year, month + 1, 0).getDate();\n}\n\n// Session storage\nfunction getURLDateStr() {\n    const url = new URL(window.location.href);\n    const param = url.searchParams.get(\"date\");\n    if (!param) return dateToStr(new Date());\n    return param;\n}\n\nfunction setURLDateStr(dateStr) {\n    if (debug) console.log(\"Saving date to URL & storage:\", dateStr);\n    const url = new URL(window.location.href);\n    url.searchParams.set(\"date\", dateStr);\n    history.pushState({}, \"\", url);\n    window.sessionStorage.setItem(\"hw_calendar_date\", dateStr);\n    window.dispatchEvent(new PopStateEvent(\"popstate\"));\n}\n\n// Document elements\nconst dayCells = document.querySelectorAll(\".calendar_day\");\n\nfunction initializeCalendar() {\n    const dateStr = getURLDateStr();\n    if (debug) console.log(\"Initializing calendar on date:\", dateStr);\n    setMonth(dateStr);\n    setDay(dateStr);\n}\n\n// Switch the calendar to a certain month in a certain year\nfunction setMonth(dayStr) {\n    const date = strToDate(dayStr);\n\n    // Offset the first cell based on month\n    document.querySelector(\".calendar_day\").style.gridColumnStart = offsetOfMonth(dayStr);\n    document.querySelector(\"#calendar_date h3\").innerHTML = date.toLocaleString(\"default\", { month: \"short\" }) + \" \" + date.toLocaleString(\"default\", { year: \"numeric\" });\n\n    for (const dayCell of dayCells) {\n        const cellDay = Number(dayCell.id);\n        const cellDayStr = dayCell.id.padStart(2, \"0\");\n        const cellDateStr = dayStr.substring(0, 6) + cellDayStr;\n\n        // Hide cells that are beyond the month\n        if (cellDay > daysInMonth(dayStr)) {\n            dayCell.style.display = \"none\";\n            continue;\n        }\n\n        // Reset cell indicators\n        dayCell.style.display = \"flex\";\n        dayCell.classList.remove(\"queried\");\n        dayCell.classList.remove(\"has_event\");\n\n        // Make cells interactive as their new day\n        dayCell.onclick = () => setDay(cellDateStr);\n    }\n\n    // Fetch events for the month\n    fetch(\"/wp-json/wp/v2/month?date=\" + dayStr)\n        .then(res => res.json())\n        .then(events => renderEventDays(dayStr, events));\n\n    // Update the month navigation buttons\n    document.getElementById(\"nextMonthButton\").onclick = () => nextMonth(dayStr);\n    document.getElementById(\"prevMonthButton\").onclick = () => prevMonth(dayStr);\n}\n\n// Highlight the days that have events, once the events are fetched\nfunction renderEventDays(dayStr, events) {\n    if (!Array.isArray(events)) return console.log('Invalid events data:', events);\n    if (events.length === 0) return console.log('No events for the month.');\n    if (debug) console.log('Rendering events for month:', dayStr, events);\n\n    for (const dayCell of dayCells) {\n        const cellDayStr = dayCell.id.padStart(2, \"0\");\n        const cellDateStr = dayStr.substring(0, 6) + cellDayStr;\n\n        const ongoingEvents = events.filter(event => {\n            const eventDay = event.acf.date;\n            let eventEndDay = event.acf.end_date;\n            if (!eventDay) return false;\n            if (!eventEndDay || eventEndDay.length === 0) eventEndDay = eventDay;\n            try {\n                const match = parseInt(cellDateStr) >= parseInt(eventDay) && parseInt(cellDateStr) <= parseInt(eventEndDay);\n                // if (debug && match) console.log('Event match for ' + cellDateStr + ' : ' + eventDay + ' -> ' +eventEndDay + ' (' + event.post_title + ')');\n                return match;\n            } catch (e) {\n                return false;\n            }\n        });\n\n        // if (debug) console.log(cellDateStr + ' events:', ongoingEvents);\n\n        if (ongoingEvents.length > 0) {\n            dayCell.classList.add(\"has_event\");\n        } else {\n            dayCell.classList.remove(\"has_event\");\n        }\n    }\n}\n\n// Switch the calendar to a certain day\nfunction setDay(dayStr) {\n    if (debug) console.log(\"Setting calendar to day:\", dayStr);\n    // Update the URL and session storage\n    setURLDateStr(dayStr);\n\n    // Highlight the selected day\n    for (const dayCell of dayCells) {\n        const cellDayStr = dayCell.id.padStart(2, \"0\");\n        const cellDateStr = dayStr.substring(0, 6) + cellDayStr;\n\n        if (cellDateStr === dayStr) {\n            dayCell.classList.add(\"queried\");\n        } else {\n            dayCell.classList.remove(\"queried\");\n        }\n    }\n}\n\n// Navigate to the next or previous month\nfunction nextMonth(dayStr) {\n    if (debug) console.log(\"Navigating to next month from:\", dayStr);\n    const date = strToDate(dayStr);\n    const newDate = new Date(date.getFullYear(), date.getMonth() + 1, 1);\n    const newDateStr = dateToStr(newDate);\n\n    setMonth(newDateStr);\n    setDay(newDateStr);\n}\n\nfunction prevMonth(dayStr) {\n    if (debug) console.log(\"Navigating to previous month from:\", dayStr);\n    const date = strToDate(dayStr);\n    const newDate = new Date(date.getFullYear(), date.getMonth() - 1, 1);\n    const newDateStr = dateToStr(newDate);\n\n    setMonth(newDateStr);\n    setDay(newDateStr);\n}\n\n\ninitializeCalendar();\n\n\n"],"names":["debug","dateToStr","date","toISOString","split","join","strToDate","str","year","substring","month","day","Date","offsetOfMonth","dateStr","getDay","daysInMonth","getDate","getURLDateStr","url","URL","window","location","href","param","searchParams","get","setURLDateStr","console","log","set","history","pushState","sessionStorage","setItem","dispatchEvent","PopStateEvent","dayCells","document","querySelectorAll","initializeCalendar","setMonth","setDay","dayStr","querySelector","style","gridColumnStart","innerHTML","toLocaleString","dayCell","cellDay","Number","id","cellDayStr","padStart","cellDateStr","display","classList","remove","onclick","fetch","then","res","json","events","renderEventDays","getElementById","nextMonth","prevMonth","Array","isArray","length","ongoingEvents","filter","event","eventDay","acf","eventEndDay","end_date","match","parseInt","e","add","newDate","getFullYear","getMonth","newDateStr"],"sourceRoot":""}