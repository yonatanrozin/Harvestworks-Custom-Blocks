{"version":3,"file":"header-with-radio/view.js","mappings":";;;;;;;;;;;;;;;;AAAsC;AAE/B,MAAME,KAAK,CAAC;EAEf;EACAC,MAAM,GAAG,GAAG;EACZC,qBAAqB,GAAG,IAAI;EAC5BC,oBAAoB,GAAG,IAAI;EAC3BC,wBAAwB,GAAG,IAAI;EAC/BC,uBAAuB,GAAG,IAAI;EAC9BC,gBAAgB,GAAG,IAAI;;EAEvB;EACAC,yBAAyB,GAAG,QAAQ;EACpCC,yBAAyB,GAAG,OAAO;;EAEnC;EACAC,sBAAsB,GAAG,iBAAiB;EAC1CC,qBAAqB,GAAG,YAAY;EACpCC,wBAAwB,GAAG,aAAa;EACxCC,yBAAyB,GAAG,cAAc;EAC1CC,gBAAgB,GAAG,gBAAgB;EAEnCC,SAAS,GAAG,EAAE;EACdC,aAAa,GAAG,EAAE;;EAElB;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE;IACjC,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACC,yBAAyB,GAAG,IAAI;IAErC,IAAI,CAACC,KAAK,GAAG,IAAI;;IAEjB;IACA,IAAI,CAACC,QAAQ,GAAG;MACZC,KAAK,EAAEL,QAAQ,CAACM,aAAa,CAAC,aAAa,CAAC;MAC5CC,WAAW,EAAEP,QAAQ,CAACM,aAAa,CAAC,SAAS,CAAC;MAC9CE,OAAO,EAAER,QAAQ,CAACM,aAAa,CAAC,kBAAkB,CAAC;MACnDG,cAAc,EAAET,QAAQ,CAACM,aAAa,CAAC,eAAe,CAAC;MACvDI,MAAM,EAAEV,QAAQ,CAACM,aAAa,CAAC,iBAAiB,CAAC;MACjDK,SAAS,EAAEX,QAAQ,CAACM,aAAa,CAAC,eAAe,CAAC;MAElD;MACAM,QAAQ,EAAEZ,QAAQ,CAACM,aAAa,CAAC,cAAc,CAAC;MAChDO,OAAO,EAAEb,QAAQ,CAACM,aAAa,CAAC,kBAAkB,CAAC;MACnDQ,MAAM,EAAEd,QAAQ,CAACM,aAAa,CAAC,iBAAiB,CAAC;MACjDS,MAAM,EAAEf,QAAQ,CAACM,aAAa,CAAC,iBAAiB,CAAC;MACjDU,MAAM,EAAEhB,QAAQ,CAACM,aAAa,CAAC,iBAAiB;IACpD,CAAC;IAED,IAAI,IAAI,CAACW,WAAW,EAChB,IAAI,CAACA,WAAW,GAAG,IAAI;IAE3B,IAAI,CAACC,kBAAkB,CAAC,YAAY,CAAC;;IAErC;IACA,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAAC,IAAI,CAAClB,QAAQ,CAAC,EAAE;MACtD,IAAI,CAACgB,KAAK,EAAE;QACR,IAAI,CAACG,mBAAmB,CAAC,gCAAgCJ,GAAG,EAAE,CAAC;MACnE;IACJ;IAEA,IAAI,CAACtC,0CAAM,IAAI,CAACD,wCAAI,EAAE;MAClB,IAAI,CAAC2C,mBAAmB,CAAC,oCAAoC,CAAC;IAClE;IACA;IACA1C,0CAAM,CAAC2C,aAAa,GAAG,IAAI;IAE3B,IAAI,CAACC,SAAS,GAAG1B,MAAM,CAAC2B,WAAW;IACnC,IAAI,CAAC,IAAI,CAACD,SAAS,EAAE;MACjB,IAAI,CAACF,mBAAmB,CAAC,sCAAsC,CAAC;IACpE;IAEA,IAAI,CAACI,cAAc,CAAC,CAAC;;IAErB;IACA,IAAI,IAAI,CAACC,gBAAgB,CAAC,CAAC,EAAE;MACzB,IAAI,IAAI,CAACX,WAAW,EAChB,IAAI,CAACY,mBAAmB,CAAC,CAAC;IAClC;;IAEA;IACA,IAAI,CAACzB,QAAQ,CAACQ,QAAQ,CAACkB,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACnD,IAAI,IAAI,CAACb,WAAW,EAAE;QAClB,IAAI,CAACA,WAAW,GAAG,KAAK;QACxB,IAAI,CAACc,SAAS,CAAC,CAAC;MACpB,CAAC,MACI;QACD,IAAI,CAACd,WAAW,GAAG,IAAI;QACvB,IAAI,CAACe,UAAU,CAAC,CAAC;MACrB;IACJ,CAAC,CAAC;IAEF,IAAI,CAAC5B,QAAQ,CAACS,OAAO,CAACiB,gBAAgB,CAAC,OAAO,EAAE,MAAM;MAClD,IAAI,CAACC,SAAS,CAAC,CAAC;IACpB,CAAC,CAAC;IAEF,IAAI,CAAC3B,QAAQ,CAACU,MAAM,CAACgB,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACjD,IAAI,CAACE,UAAU,CAAC,CAAC;IACrB,CAAC,CAAC;IAEF,IAAI,CAAC5B,QAAQ,CAACW,MAAM,CAACe,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACjD,IAAI,CAACG,QAAQ,CAAC,CAAC;IACnB,CAAC,CAAC;IAEF,IAAI,CAAC7B,QAAQ,CAACY,MAAM,CAACc,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACjD,IAAI,CAACI,QAAQ,CAAC,CAAC;IACnB,CAAC,CAAC;IAEF,IAAI,CAACnC,MAAM,CAAC+B,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACzC,IAAI,CAACK,iBAAiB,CAAC,CAAC;IAC5B,CAAC,CAAC;EACN;;EAEA;;EAEAC,GAAGA,CAACC,OAAO,EAAE;IACT,IAAI,IAAI,CAACpC,KAAK,EACVqC,OAAO,CAACF,GAAG,CAAC,UAAU,GAAGC,OAAO,CAAC;EACzC;EAEAd,mBAAmBA,CAACc,OAAO,EAAE;IACzB,IAAI,CAACD,GAAG,CAACC,OAAO,CAAC;IAEjBE,UAAU,CAAC,MAAM;MACbA,UAAU,CAAC,MAAM;QACb,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACC,aAAa,CAAC;MAClD,CAAC,EAAE,IAAI,CAACzD,qBAAqB,CAAC;MAE9B,IAAI,CAACoB,QAAQ,CAACI,OAAO,CAACkC,WAAW,GAAGL,OAAO;IAC/C,CAAC,EAAE,IAAI,CAACjD,gBAAgB,CAAC;EAC7B;EAEA8B,kBAAkBA,CAACmB,OAAO,EAAE;IACxBE,UAAU,CAAC,MAAM;MACb,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACC,aAAa,CAAC;IAClD,CAAC,EAAE,IAAI,CAACxD,oBAAoB,CAAC;IAE7B,IAAI,CAACmB,QAAQ,CAACI,OAAO,CAACkC,WAAW,GAAGL,OAAO;EAC/C;;EAEA;;EAEAV,cAAcA,CAAA,EAAG;IACb,IAAIgB,IAAI,GAAG,IAAI,CAACvC,QAAQ,CAACC,KAAK,CAACqC,WAAW;IAE1CC,IAAI,GAAGC,IAAI,CAACD,IAAI,CAAC;IAEjB,IAAI,CAAC/C,SAAS,GAAG+C,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAC5BC,MAAM,CAAEC,GAAG;IAAK;IACbA,GAAG,CAACC,IAAI,CAAC,CAAC,KAAK,EACnB,CAAC,CAACC,GAAG,CAAEF,GAAG;IAAK;IACXA,GAAG,CAACG,UAAU,CAAC,eAAe,EAAE,EAAE,CAAC,CAC9BA,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CACvBF,IAAI,CAAC,CACd,CAAC,CAACC,GAAG,CAAEF,GAAG,IAAK;MAAE;MACb,IAAIA,GAAG,CAACI,UAAU,CAAC,MAAM,CAAC,EAAE;QACxB,OAAO,IAAI,CAACpD,MAAM,CAACqD,QAAQ,CAACC,MAAM,GAAG,GAAG,GAAGN,GAAG,CAACF,KAAK,CAAC,GAAG,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MAChF;IACJ,CAAC,CAAC;IAGN,IAAI,CAAC1D,aAAa,GAAG,IAAI,CAACD,SAAS,CAAC4D,IAAI,CAAC,CAAC;IAE1C,IAAI,CAAC,IAAI,CAAC5D,SAAS,CAAC6D,MAAM,GAAG,CAAC,EAAE;MAC5B,IAAI,CAAClC,mBAAmB,CAAC,kCAAkC,CAAC;IAChE;EACJ;;EAEA;;EAEAK,gBAAgBA,CAAA,EAAG;IACf,OAAO,IAAI,CAACa,aAAa,IAAI,IAAI,CAACiB,kBAAkB,IAAI,IAAI,CAACjB,aAAa,CAACO,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAACU,kBAAkB,CAACV,IAAI,CAAC,CAAC,IAAI,EAAE;EACnI;EAEAnB,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAAC,IAAI,CAACD,gBAAgB,CAAC,CAAC,EACxB;IAEJ,IAAI,CAACQ,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAACK,aAAa,IAAI,IAAI,CAACkB,mBAAmB,GAAG,SAAS,GAAG,UAAU,CAAC,GAAG,MAAM,GAAG,IAAI,CAACD,kBAAkB,CAAC;IAC9I,IAAI,CAACzC,WAAW,GAAG,IAAI;IACvB,IAAI,CAAC,IAAI,CAACrB,SAAS,CAACgE,QAAQ,CAAC,IAAI,CAACnB,aAAa,CAAC,EAC5C,OAAO,IAAI,CAACL,GAAG,CAAC,yCAAyC,CAAC;IAE9D,IAAI,CAACyB,QAAQ,CAAC,IAAI,CAACpB,aAAa,EAAE,IAAI,CAACiB,kBAAkB,EAAE,CAAC,IAAI,CAACC,mBAAmB,CAAC;IAErF,IAAI,IAAI,CAACA,mBAAmB,EAAE;MAC1B,IAAI,CAACG,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAAC/B,SAAS,CAAC,CAAC;IACpB;EACJ;EAEA8B,QAAQA,CAACd,GAAG,EAAEgB,IAAI,GAAG,CAAC,EAAEC,QAAQ,GAAG,KAAK,EAAE;IACtC,IAAI,IAAI,CAAC7D,KAAK,EACV,IAAI,CAACA,KAAK,CAAC8D,IAAI,CAAC,CAAC;IAErB,IAAI,CAAC9D,KAAK,GAAG,IAAIvB,wCAAI,CAAC;MAClBsF,GAAG,EAAEnB,GAAG;MACRoB,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE,IAAI,CAACrF,MAAM;MACnBiF,QAAQ,EAAEA;IACd,CAAC,CAAC;IAEF,IAAID,IAAI,IAAI,CAAC,EACT,IAAI,CAAC5D,KAAK,CAACkE,IAAI,CAACN,IAAI,CAAC;IAEzB,IAAIC,QAAQ,EACR,IAAI,CAACF,kBAAkB,GAAG,KAAK;IACnC;;IAEA,IAAI,CAACrB,aAAa,GAAGM,GAAG;IACxB,IAAI,CAACW,kBAAkB,GAAGK,IAAI;IAC9B,IAAI,CAACJ,mBAAmB,GAAGK,QAAQ;IAEnC,IAAI,CAAC7D,KAAK,CAACmE,EAAE,CAAC,QAAQ,EAAE,MAAM;MAC1B,IAAI,CAAClC,GAAG,CAAC,oBAAoB,CAAC;MAC9B;MACA;IACJ,CAAC,CAAC;IAEF,IAAI,CAACjC,KAAK,CAACoE,IAAI,CAAC,MAAM,EAAE,MAAM;MAC1B,IAAI,CAACnC,GAAG,CAAC,cAAc,GAAG,IAAI,CAACjC,KAAK,CAACqE,IAAI,CAAC;MAC1C,IAAI,CAAChC,qBAAqB,CAAC,IAAI,CAACrC,KAAK,CAACqE,IAAI,CAAC;IAC/C,CAAC,CAAC;IAEF,IAAI,CAACrE,KAAK,CAACmE,EAAE,CAAC,WAAW,EAAE,MAAM;MAC7B,IAAI,CAAC/C,mBAAmB,CAAC,kCAAkC,CAAC;MAC5D,IAAI,CAACa,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAACjC,KAAK,CAACqE,IAAI,CAAC;MAElD,IAAI,CAACV,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAACW,YAAY,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,IAAI,CAACtE,KAAK,CAACmE,EAAE,CAAC,MAAM,EAAE,MAAM;MACxB,IAAI,CAAClC,GAAG,CAAC,cAAc,CAAC;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACjC,KAAK,CAACmE,EAAE,CAAC,OAAO,EAAE,MAAM;MACzB,IAAI,CAAClC,GAAG,CAAC,cAAc,GAAG,IAAI,CAACjC,KAAK,CAACqE,IAAI,GAAG,MAAM,GAAG,IAAI,CAACrE,KAAK,CAACkE,IAAI,CAAC,CAAC,CAAC;MACvE,IAAI,CAACP,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAACH,mBAAmB,GAAG,IAAI;MAE/B,IAAI,CAAClB,aAAa,GAAG,IAAI,CAACtC,KAAK,CAACqE,IAAI;MACpC,IAAI,CAACd,kBAAkB,GAAG,IAAI,CAACvD,KAAK,CAACkE,IAAI,CAAC,CAAC;MAC3C,IAAI,CAACV,mBAAmB,GAAG,IAAI;MAC/B,IAAI,CAACe,qBAAqB,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF,IAAI,CAACvE,KAAK,CAACmE,EAAE,CAAC,MAAM,EAAE,MAAM;MACxB,IAAI,CAAClC,GAAG,CAAC,eAAe,GAAG,IAAI,CAACjC,KAAK,CAACqE,IAAI,GAAG,MAAM,GAAG,IAAI,CAACrE,KAAK,CAACkE,IAAI,CAAC,CAAC,CAAC;MACxE,IAAI,CAACP,kBAAkB,GAAG,KAAK;MAC/B,IAAI,CAACH,mBAAmB,GAAG,KAAK;MAEhC,IAAI,CAAClB,aAAa,GAAG,IAAI,CAACtC,KAAK,CAACqE,IAAI;MACpC,IAAI,CAACd,kBAAkB,GAAG,IAAI,CAACvD,KAAK,CAACkE,IAAI,CAAC,CAAC;MAC3C,IAAI,CAACV,mBAAmB,GAAG,KAAK;MAEhC,IAAI,CAACgB,2BAA2B,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,IAAI,CAACxE,KAAK,CAACmE,EAAE,CAAC,WAAW,EAAE,MAAM;MAC7B,IAAI,CAAC/C,mBAAmB,CAAC,+DAA+D,CAAC;MACzF,IAAI,CAACa,GAAG,CAAC,iBAAiB,GAAG,IAAI,CAACjC,KAAK,CAACqE,IAAI,GAAG,MAAM,GAAG,IAAI,CAACrE,KAAK,CAACkE,IAAI,CAAC,CAAC,CAAC;MAC1E,IAAI,CAACP,kBAAkB,GAAG,IAAI;IAClC,CAAC,CAAC;IAEF,IAAI,CAAC3D,KAAK,CAACmE,EAAE,CAAC,MAAM,EAAE,MAAM;MACxB,IAAI,CAAClC,GAAG,CAAC,wBAAwB,CAAC;IACtC,CAAC,CAAC;IAEF,IAAI,CAACjC,KAAK,CAACmE,EAAE,CAAC,MAAM,EAAE,MAAM;MACxB,IAAI,CAAClC,GAAG,CAAC,cAAc,GAAG,IAAI,CAACjC,KAAK,CAACqE,IAAI,GAAG,MAAM,GAAG,IAAI,CAACrE,KAAK,CAACkE,IAAI,CAAC,CAAC,CAAC;MAEvE,IAAI,CAAC5B,aAAa,GAAG,IAAI,CAACtC,KAAK,CAACqE,IAAI;MACpC,IAAI,CAACd,kBAAkB,GAAG,IAAI,CAACvD,KAAK,CAACkE,IAAI,CAAC,CAAC;MAE3C,IAAI,IAAI,CAAClE,KAAK,CAACkE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAClE,KAAK,CAACyE,SAAS,GAAG,CAAC,EAC5C,IAAI,CAACF,qBAAqB,CAAC,CAAC;MAEhC,IAAI,IAAI,CAACvE,KAAK,CAACkE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAClE,KAAK,CAACyE,SAAS,GAAG,CAAC,IAAI,CAAC,IAAI,CAACzE,KAAK,CAAC0E,OAAO,CAAC,CAAC,EAAE;QACvE,IAAI,CAACpC,aAAa,GAAG,EAAE;QACvB,IAAI,CAACiB,kBAAkB,GAAG,CAAC;QAC3B,IAAI,CAACoB,gBAAgB,CAAC,IAAI,CAAC3E,KAAK,CAACqE,IAAI,CAAC;QAEtC,IAAI,CAACC,YAAY,CAAC,IAAI,CAAC;MAC3B;IACJ,CAAC,CAAC;IAEF,IAAI,CAACtE,KAAK,CAACmE,EAAE,CAAC,MAAM,EAAE,MAAM;MACxB,IAAI,CAAClC,GAAG,CAAC,eAAe,GAAG,IAAI,CAACjC,KAAK,CAACqE,IAAI,GAAG,MAAM,GAAG,IAAI,CAACrE,KAAK,CAACkE,IAAI,CAAC,CAAC,CAAC;MAExE,IAAI,CAAC5B,aAAa,GAAG,IAAI,CAACtC,KAAK,CAACqE,IAAI;MACpC,IAAI,CAACd,kBAAkB,GAAG,IAAI,CAACvD,KAAK,CAACkE,IAAI,CAAC,CAAC;MAC3C,IAAI,CAACK,qBAAqB,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF,IAAI,CAACvE,KAAK,CAACmE,EAAE,CAAC,KAAK,EAAE,MAAM;MACvB,IAAI,CAAClC,GAAG,CAAC,aAAa,GAAG,IAAI,CAACjC,KAAK,CAACqE,IAAI,GAAG,MAAM,GAAG,IAAI,CAACrE,KAAK,CAACkE,IAAI,CAAC,CAAC,CAAC;MAEtE,IAAI,CAAC5B,aAAa,GAAG,EAAE;MACvB,IAAI,CAACiB,kBAAkB,GAAG,CAAC;MAC3B,IAAI,CAACoB,gBAAgB,CAAC,IAAI,CAAC3E,KAAK,CAACqE,IAAI,CAAC;MAEtC,IAAI,CAACC,YAAY,CAAC,IAAI,CAAC;IAC3B,CAAC,CAAC;IAEF,IAAI,CAACtE,KAAK,CAACmE,EAAE,CAAC,QAAQ,EAAE,MAAM;MAC1B,IAAI,CAAClC,GAAG,CAAC,iBAAiB,CAAC;IAC/B,CAAC,CAAC;EACN;EAEAqC,YAAYA,CAACT,QAAQ,GAAG,IAAI,EAAE;IAC1B,IAAI,CAACe,WAAW,CAACC,OAAO,CAAEjC,GAAG,IAAK;MAC9B,MAAMkC,KAAK,GAAG,IAAI,CAACpF,aAAa,CAACqF,OAAO,CAACnC,GAAG,CAAC;MAC7C,IAAIkC,KAAK,IAAI,CAAC,CAAC,EAAE;QACb,IAAI,CAACpF,aAAa,CAACsF,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACvC;;MAEA;IACJ,CAAC,CAAC;;IAEF;;IAEA,IAAI,IAAI,CAACpF,aAAa,CAAC4D,MAAM,KAAK,CAAC,EAAE;MACjC,IAAI,CAACrB,GAAG,CAAC,oDAAoD,CAAC;MAC9D,IAAI,CAACvC,aAAa,GAAG,IAAI,CAACD,SAAS,CAAC4D,IAAI,CAAC,CAAC;MAC1C,IAAI,CAACuB,WAAW,GAAG,EAAE;IACzB;IAEA,MAAMK,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC1F,aAAa,CAAC4D,MAAM,CAAC;IAEzE,IAAI,CAACI,QAAQ,CAAC,IAAI,CAAChE,aAAa,CAACuF,WAAW,CAAC,EAAE,CAAC,EAAEpB,QAAQ,CAAC;EAC/D;EAEAjC,SAASA,CAAA,EAAG;IACR,IAAI,CAAC,IAAI,CAAC5B,KAAK,EACX,OAAO,IAAI,CAACsE,YAAY,CAAC,KAAK,CAAC;IACnC,IAAI,CAAC,IAAI,CAACtE,KAAK,CAAC0E,OAAO,CAAC,CAAC,EACrB,OAAO,IAAI,CAACzC,GAAG,CAAC,kCAAkC,CAAC;IACvD,IAAI,CAACjC,KAAK,CAACqF,KAAK,CAAC,CAAC;EACtB;EAEAxD,UAAUA,CAAA,EAAG;IACT,IAAI,CAAC,IAAI,CAAC7B,KAAK,IAAI,IAAI,CAACyB,gBAAgB,CAAC,CAAC,EACtC,OAAO,IAAI,CAACC,mBAAmB,CAAC,CAAC;IACrC,IAAI,CAAC,IAAI,CAAC1B,KAAK,EACX,OAAO,IAAI,CAACsE,YAAY,CAAC,IAAI,CAAC;IAClC,IAAI,IAAI,CAACtE,KAAK,IAAI,IAAI,CAACA,KAAK,CAAC0E,OAAO,CAAC,CAAC,EAClC,OAAO,IAAI,CAACzC,GAAG,CAAC,mCAAmC,CAAC;IACxD,IAAI,CAACjC,KAAK,CAACsF,IAAI,CAAC,CAAC;EACrB;EAEAxD,QAAQA,CAAA,EAAG;IACP,IAAI,CAAC,IAAI,CAAC9B,KAAK,EACX,OAAO,IAAI,CAACsE,YAAY,CAAC,IAAI,CAAC;IAClC,IAAI,CAACtE,KAAK,CAACkE,IAAI,CAAC,IAAI,CAAClE,KAAK,CAACyE,SAAS,GAAG,GAAG,CAAC;EAC/C;EAEA1C,QAAQA,CAAA,EAAG;IACP,MAAMwD,OAAO,GAAG,IAAI,CAACX,WAAW;IAChC,IAAK,IAAI,CAAC5E,KAAK,IAAI,IAAI,CAACA,KAAK,CAACkE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAClF,uBAAuB,EAAG;MAClE,IAAI,CAACiD,GAAG,CAAC,2BAA2B,CAAC;MACrC,OAAO,IAAI,CAACjC,KAAK,CAACkE,IAAI,CAAC,CAAC,CAAC;IAC7B;IACA,IAAI,CAACqB,OAAO,IAAIA,OAAO,CAACjC,MAAM,KAAK,CAAC,EAAE;MAClC,IAAI,CAACrB,GAAG,CAAC,4BAA4B,CAAC;MACtC,OAAO,IAAI,CAACjC,KAAK,CAACkE,IAAI,CAAC,CAAC,CAAC;IAC7B;IACA,IAAI,CAACjC,GAAG,CAAC,wBAAwB,GAAGsD,OAAO,CAACA,OAAO,CAACjC,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,GAAGiC,OAAO,CAAC;IACrF,IAAI,CAAC7B,QAAQ,CAAC6B,OAAO,CAACA,OAAO,CAACjC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;IACnD,IAAI,CAAChB,aAAa,GAAG,EAAE;IACvB,IAAI,CAACiB,kBAAkB,GAAG,CAAC;IAC3B,IAAI,CAACiC,qBAAqB,CAACD,OAAO,CAACA,OAAO,CAACjC,MAAM,GAAG,CAAC,CAAC,CAAC;EAE3D;;EAGA;;EAEAjB,qBAAqBA,CAAC0B,GAAG,EAAE;IAEvB,MAAM0B,IAAI,GAAG,IAAI;IAEjB,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAC5B,IAAI,CAACpE,SAAS,CAACqE,IAAI,CAAC5B,GAAG,EAAE;MACrB6B,SAAS,EAAE,SAAAA,CAAUC,GAAG,EAAE;QACtB;QACA,IAAIJ,IAAI,CAAC3F,KAAK,EACVqC,OAAO,CAACF,GAAG,CAAC,0BAA0B,EAAE4D,GAAG,CAAC;QAChD,IAAIC,KAAK,GAAG,EAAE;QACd,IAAID,GAAG,CAACE,IAAI,CAACD,KAAK,EACdA,KAAK,GAAGD,GAAG,CAACE,IAAI,CAACD,KAAK;QAC1B,IAAID,GAAG,CAACE,IAAI,CAACC,IAAI,EACbF,KAAK,IAAI,qBAAqB,GAAGD,GAAG,CAACE,IAAI,CAACC,IAAI,GAAG,GAAG;QAExDP,IAAI,CAACxF,QAAQ,CAACI,OAAO,CAAC4F,SAAS,GAAGJ,GAAG,CAACE,IAAI,CAACG,KAAK;QAChD,IAAIL,GAAG,CAACE,IAAI,CAACI,MAAM,EACfV,IAAI,CAACxF,QAAQ,CAACI,OAAO,CAAC4F,SAAS,IAAI,2BAA2B,GAAGJ,GAAG,CAACE,IAAI,CAACI,MAAM;QAEpF,MAAMC,OAAO,GAAGX,IAAI,CAAC5F,QAAQ,CAACwG,aAAa,CAAC,MAAM,CAAC;QACnDD,OAAO,CAACH,SAAS,GAAGH,KAAK;QACzBM,OAAO,CAACE,SAAS,CAACC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC;QAC3Cd,IAAI,CAACxF,QAAQ,CAACI,OAAO,CAACmG,WAAW,CAACJ,OAAO,CAAC;;QAE1C;QACA,IAAIX,IAAI,CAACxF,QAAQ,CAACO,SAAS,EAAE;UACzBiF,IAAI,CAACxF,QAAQ,CAACO,SAAS,CAACyF,SAAS,GAAG,EAAE;UAGtC,MAAMQ,YAAY,GAAGhB,IAAI,CAAC5F,QAAQ,CAACwG,aAAa,CAAC,GAAG,CAAC;UACrDI,YAAY,CAACR,SAAS,GAAGJ,GAAG,CAACE,IAAI,CAACG,KAAK,IAAIL,GAAG,CAACE,IAAI,CAACI,MAAM,GAAG,MAAM,GAAGN,GAAG,CAACE,IAAI,CAACI,MAAM,GAAG,EAAE,CAAC;UAC3FM,YAAY,CAACC,KAAK,CAACC,QAAQ,GAAG,MAAM;UACpCF,YAAY,CAACC,KAAK,CAACE,UAAU,GAAG,MAAM;UACtCnB,IAAI,CAACxF,QAAQ,CAACO,SAAS,CAACgG,WAAW,CAACC,YAAY,CAAC;UAEjDvF,MAAM,CAAC2F,IAAI,CAAChB,GAAG,CAACE,IAAI,CAAC,CAAClB,OAAO,CAAE7D,GAAG,IAAK;YACnC,IAAIA,GAAG,KAAK,SAAS,EACjB,OAAO,CAAC;YACZ,IAAI,CAAC6E,GAAG,CAACE,IAAI,CAAC/E,GAAG,CAAC,CAAC8F,WAAW,IAAI,CAACjB,GAAG,CAACE,IAAI,CAAC/E,GAAG,CAAC,CAAC+F,IAAI,EACjD,OAAO,CAAC;;YAGZ,MAAMC,CAAC,GAAGvB,IAAI,CAAC5F,QAAQ,CAACwG,aAAa,CAAC,GAAG,CAAC;YAC1CW,CAAC,CAACf,SAAS,GAAG,6BAA6B,GAAGJ,GAAG,CAACE,IAAI,CAAC/E,GAAG,CAAC,CAAC8F,WAAW,GAAG,UAAU,GAAGjB,GAAG,CAACE,IAAI,CAAC/E,GAAG,CAAC,CAAC+F,IAAI,CAAChE,UAAU,CAAC,GAAG,EAAE,QAAQ,CAAC;YACnI0C,IAAI,CAACxF,QAAQ,CAACO,SAAS,CAACgG,WAAW,CAACQ,CAAC,CAAC;UAC1C,CAAC,CAAC;UACF,MAAMC,YAAY,GAAGxB,IAAI,CAAC5F,QAAQ,CAACwG,aAAa,CAAC,GAAG,CAAC;UACrDY,YAAY,CAACP,KAAK,CAACQ,UAAU,GAAG,MAAM;UACtCD,YAAY,CAACP,KAAK,CAACS,UAAU,GAAG,KAAK;UACrCF,YAAY,CAACP,KAAK,CAACU,aAAa,GAAG,KAAK;UACxCH,YAAY,CAAChB,SAAS,GAAG,iPAAiP;UAC1QR,IAAI,CAACxF,QAAQ,CAACO,SAAS,CAACgG,WAAW,CAACS,YAAY,CAAC;QAErD;MAEJ,CAAC;MACDI,OAAO,EAAE,SAAAA,CAAUC,KAAK,EAAE;QACtB,IAAI,CAAClG,mBAAmB,CAAC,sCAAsC,CAAC;QAChEe,OAAO,CAACF,GAAG,CAAC,8CAA8C,EAAEqF,KAAK,CAACC,IAAI,EAAED,KAAK,CAACE,IAAI,CAAC;MACvF;IACJ,CAAC,CAAC;EACN;EAEAxF,iBAAiBA,CAAA,EAAG;IAChB;IACA,IAAI,IAAI,CAAC/B,QAAQ,CAACK,cAAc,CAACmH,WAAW,GAAG,IAAI,CAACxH,QAAQ,CAACI,OAAO,CAACoH,WAAW,EAC5E,IAAI,CAACxH,QAAQ,CAACI,OAAO,CAACiG,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC,CAAC,KAEjD,IAAI,CAACtG,QAAQ,CAACI,OAAO,CAACiG,SAAS,CAACoB,MAAM,CAAC,WAAW,CAAC;EAC3D;EAEAhC,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAAC,IAAI,CAAC1F,KAAK,EAAE;MACb,IAAI,CAACC,QAAQ,CAACM,MAAM,CAACgC,WAAW,GAAG,IAAI,CAACtC,QAAQ,CAACM,MAAM,CAACgC,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ;MAC5F;IACJ;IAEA,MAAMiF,OAAO,GAAG,IAAI,CAAC3H,KAAK,CAACyE,SAAS;IACpC,IAAImD,cAAc,GAAG1C,IAAI,CAACC,KAAK,CAACwC,OAAO,GAAG,EAAE,CAAC;IAC7C,IAAIC,cAAc,GAAG,EAAE,EACnBA,cAAc,GAAG,GAAG,GAAGA,cAAc;IAEzC,IAAI,CAAC3H,QAAQ,CAACM,MAAM,CAACgC,WAAW,GAAG,IAAI,CAACtC,QAAQ,CAACM,MAAM,CAACgC,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGwC,IAAI,CAACC,KAAK,CAACwC,OAAO,GAAG,EAAE,CAAC,GAAG,GAAG,GAAGC,cAAc;EAC9I;EAEArD,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAAC,IAAI,CAACvE,KAAK,EAAE;MACb,IAAI,CAACC,QAAQ,CAACM,MAAM,CAACgC,WAAW,GAAG,QAAQ,GAAG,IAAI,CAACtC,QAAQ,CAACM,MAAM,CAACgC,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5F;IACJ;IAEA,MAAMiF,OAAO,GAAG,IAAI,CAAC3H,KAAK,CAACkE,IAAI,CAAC,CAAC;IACjC,IAAI0D,cAAc,GAAG1C,IAAI,CAACC,KAAK,CAACwC,OAAO,GAAG,EAAE,CAAC;IAC7C,IAAIC,cAAc,GAAG,EAAE,EACnBA,cAAc,GAAG,GAAG,GAAGA,cAAc;IAEzC,IAAI,CAAC3H,QAAQ,CAACM,MAAM,CAACgC,WAAW,GAAG2C,IAAI,CAACC,KAAK,CAACwC,OAAO,GAAG,EAAE,CAAC,GAAG,GAAG,GAAGC,cAAc,GAAG,IAAI,GAAG,IAAI,CAAC3H,QAAQ,CAACM,MAAM,CAACgC,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC9I;EAEA8B,2BAA2BA,CAAA,EAAG;IAC1B,IAAI,CAACqD,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAACtD,qBAAqB,CAAC,CAAC;IAC5B,IAAI,CAACxE,yBAAyB,GAAG+H,WAAW,CAAC,MAAM;MAC/C,IAAI,CAACxF,aAAa,GAAG,IAAI,CAACtC,KAAK,CAACqE,IAAI;MACpC,IAAI,CAACd,kBAAkB,GAAG,IAAI,CAACvD,KAAK,CAACkE,IAAI,CAAC,CAAC;MAC3C,IAAI,CAACK,qBAAqB,CAAC,CAAC;IAChC,CAAC,EAAE,IAAI,CAACxF,wBAAwB,CAAC;EACrC;EAEA8I,oBAAoBA,CAAA,EAAG;IACnBE,aAAa,CAAC,IAAI,CAAChI,yBAAyB,CAAC;EACjD;;EAGA;;EAEA,IAAIe,WAAWA,CAAA,EAAG;IACd,OAAO,IAAI,CAAClB,MAAM,CAACoI,cAAc,CAACC,OAAO,CAAC,IAAI,CAAC1I,yBAAyB,CAAC,KAAK,MAAM;EACxF;EAEA,IAAIuB,WAAWA,CAACoH,IAAI,EAAE;IAClB,IAAI,CAACtI,MAAM,CAACoI,cAAc,CAACG,OAAO,CAAC,IAAI,CAAC5I,yBAAyB,EAAE2I,IAAI,CAAC;IACxE,IAAIA,IAAI,EACJ,IAAI,CAACjI,QAAQ,CAACG,WAAW,CAACkG,SAAS,CAACC,GAAG,CAAC,IAAI,CAACrH,yBAAyB,CAAC,CAAC,KAExE,IAAI,CAACe,QAAQ,CAACG,WAAW,CAACkG,SAAS,CAACoB,MAAM,CAAC,IAAI,CAACxI,yBAAyB,CAAC;EAClF;EAEA,IAAIyE,kBAAkBA,CAAA,EAAG;IACrB,IAAI,CAAC1D,QAAQ,CAACG,WAAW,CAACkG,SAAS,CAAC8B,QAAQ,CAAC,IAAI,CAACjJ,yBAAyB,CAAC;EAChF;EAEA,IAAIwE,kBAAkBA,CAACuE,IAAI,EAAE;IACzB,IAAIA,IAAI,EACJ,IAAI,CAACjI,QAAQ,CAACG,WAAW,CAACkG,SAAS,CAACC,GAAG,CAAC,IAAI,CAACpH,yBAAyB,CAAC,CAAC,KAExE,IAAI,CAACc,QAAQ,CAACG,WAAW,CAACkG,SAAS,CAACoB,MAAM,CAAC,IAAI,CAACvI,yBAAyB,CAAC;EAClF;;EAEA;;EAEA,IAAIyF,WAAWA,CAAA,EAAG;IAAA,IAAAyD,qBAAA;IACd,OAAO,EAAAA,qBAAA,GAAC,IAAI,CAACzI,MAAM,CAACoI,cAAc,CAACC,OAAO,CAAC,IAAI,CAACzI,gBAAgB,CAAC,cAAA6I,qBAAA,cAAAA,qBAAA,GAAI,EAAE,EAAE3F,KAAK,CAAC,IAAI,CAAC,CAACI,GAAG,CAAEwF,IAAI,IAAKA,IAAI,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACF,MAAM,CAAE2F,IAAI,IAAKA,IAAI,KAAK,EAAE,CAAC;EACjJ;EAEA,IAAI1D,WAAWA,CAAC2D,GAAG,EAAE;IACjB,IAAI,CAAC3I,MAAM,CAACoI,cAAc,CAACG,OAAO,CAAC,IAAI,CAAC3I,gBAAgB,EAAE+I,GAAG,CAAC1F,IAAI,CAAC,CAAC,CAAC;EACzE;EAEA8B,gBAAgBA,CAAC2D,IAAI,EAAE;IACnB,IAAI,CAACA,IAAI,EACL,OAAO,IAAI,CAACrG,GAAG,CAAC,qCAAqC,CAAC;IAC1D,IAAI,IAAI,CAAC2C,WAAW,CAACnB,QAAQ,CAAC6E,IAAI,CAAC,EAAE;MACjC,IAAI,CAACrG,GAAG,CAAC,yCAAyC,CAAC;MACnD,IAAI,CAACuD,qBAAqB,CAAC8C,IAAI,CAAC;IACpC;IACA,IAAI,CAAC1D,WAAW,GAAG,IAAI,CAACA,WAAW,CAACxB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,GAAGkF,IAAI,CAACzF,IAAI,CAAC,CAAC;IACnE,IAAI,CAACZ,GAAG,CAAC,QAAQ,GAAGqG,IAAI,GAAG,eAAe,GAAG,IAAI,CAAC1D,WAAW,CAAC;EAClE;EAEAY,qBAAqBA,CAAC8C,IAAI,EAAE;IACxB,MAAMxD,KAAK,GAAG,IAAI,CAACF,WAAW,CAAC4D,WAAW,CAACF,IAAI,CAAC;IAChD,MAAM/C,OAAO,GAAG,IAAI,CAACX,WAAW,CAACvB,IAAI,CAAC,CAAC;IACvC,IAAIyB,KAAK,KAAK,CAAC,CAAC,EAAE;MACdS,OAAO,CAACP,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACxB,IAAI,CAACF,WAAW,GAAGW,OAAO,CAACnC,IAAI,CAAC,IAAI,CAAC;IACzC;IACA,IAAI,CAACnB,GAAG,CAAC,UAAU,GAAGqG,IAAI,GAAG,iBAAiB,GAAG,IAAI,CAAC1D,WAAW,CAAC;EACtE;EAEA,IAAItC,aAAaA,CAAA,EAAG;IAChB,OAAO,IAAI,CAAC1C,MAAM,CAACoI,cAAc,CAACC,OAAO,CAAC,IAAI,CAAC5I,qBAAqB,CAAC;EACzE;EAEA,IAAIiD,aAAaA,CAACiG,GAAG,GAAG,EAAE,EAAE;IACxB,IAAI,CAAC3I,MAAM,CAACoI,cAAc,CAACG,OAAO,CAAC,IAAI,CAAC9I,qBAAqB,EAAEkJ,GAAG,CAAC;EACvE;EAEA,IAAIhF,kBAAkBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAAC3D,MAAM,CAACoI,cAAc,CAACC,OAAO,CAAC,IAAI,CAAC7I,sBAAsB,CAAC;EAC1E;EAEA,IAAImE,kBAAkBA,CAACgF,GAAG,GAAG,GAAG,EAAE;IAC9B,IAAI,CAAC3I,MAAM,CAACoI,cAAc,CAACG,OAAO,CAAC,IAAI,CAAC/I,sBAAsB,EAAEmJ,GAAG,CAAC;EACxE;EAEA,IAAI/E,mBAAmBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAAC5D,MAAM,CAACoI,cAAc,CAACC,OAAO,CAAC,IAAI,CAAC3I,wBAAwB,CAAC,KAAK,MAAM;EACvF;EAEA,IAAIkE,mBAAmBA,CAAC0E,IAAI,EAAE;IAC1B,IAAI,CAACtI,MAAM,CAACoI,cAAc,CAACG,OAAO,CAAC,IAAI,CAAC7I,wBAAwB,EAAE4I,IAAI,CAAC;EAC3E;AACJ;;;;;;;;;;ACpkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;;AAEA;AACA,0BAA0B,cAAc;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;;AAEA;AACA,wBAAwB,cAAc;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA,uCAAuC,MAAM;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;;AAEA,uDAAuD;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6EAA6E;AAC7E;AACA,kDAAkD;AAClD,iDAAiD;AACjD,iDAAiD;AACjD,kDAAkD;AAClD,gDAAgD;AAChD,kDAAkD;AAClD,mDAAmD,uCAAuC,uCAAuC;AACjI,mDAAmD,uCAAuC,uCAAuC;AACjI,mDAAmD,uCAAuC,uCAAuC;AACjI,oEAAoE;AACpE,oEAAoE;AACpE,mDAAmD;AACnD,qDAAqD,wCAAwC;AAC7F;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;;AAEA;AACA,0BAA0B,cAAc;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB,sBAAsB;AAC1C;AACA,wBAAwB,iCAAiC;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,YAAY;AAC5C,kCAAkC,aAAa;AAC/C,kCAAkC,aAAa;AAC/C,4CAA4C,kBAAkB;AAC9D,4CAA4C,kBAAkB;AAC9D,oCAAoC,cAAc;AAClD,kCAAkC,aAAa;AAC/C,kCAAkC,aAAa;AAC/C,kCAAkC,aAAa;AAC/C,sCAAsC,eAAe;AACrD,kCAAkC,aAAa;AAC/C,kCAAkC,aAAa;AAC/C,sCAAsC,eAAe;AACrD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,oBAAoB;AACxC;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,SAAS;AACzB,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA,oBAAoB,cAAc;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,SAAS;AACzB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA,oBAAoB,cAAc;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,cAAc;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,cAAc;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,4BAA4B,GAAG,eAAe;AAC1E;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA,kBAAkB,eAAe;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,MAAM;AACxC;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,WAAW;AAC3B;AACA;AACA;;AAEA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,MAAM;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,UAAU;AAC1B;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,uBAAuB;AAC7C;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,oDAAoD;AACpE;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,kBAAkB,GAAG;AACrB;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,cAAc,aAAa;AAC3B,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,cAAc,MAAM;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,IAA0C;AAChD,IAAI,iCAAO,EAAE,mCAAE;AACf;AACA;AACA;AACA;AACA,KAAK;AAAA,kGAAC;AACN;;AAEA;AACA,MAAM,IAA8B;AACpC,IAAI,cAAc;AAClB,IAAI,YAAY;AAChB;;AAEA;AACA,aAAa,qBAAM;AACnB,IAAI,qBAAM;AACV,IAAI,qBAAM;AACV,IAAI,qBAAM;AACV,IAAI,qBAAM;AACV,IAAI,2CAA2C;AAC/C;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,mBAAmB;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,MAAM;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,gBAAgB;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,kBAAkB;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,UAAU;AACxB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,eAAe;AACrD,gCAAgC,YAAY;AAC5C,gDAAgD,oBAAoB;;AAEpE;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,gBAAgB;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,eAAe;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,eAAe;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,cAAc;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,UAAU;AACxB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,UAAU;AACxB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;UC/qGD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGgC;AAEhC,MAAMO,KAAK,GAAG,IAAI9J,yCAAK,CAACiB,MAAM,EAAEC,QAAQ,EAAE,IAAI,CAAC,C","sources":["webpack://harvestworks/./src/header-with-radio/radio.js","webpack://harvestworks/./node_modules/howler/dist/howler.js","webpack://harvestworks/webpack/bootstrap","webpack://harvestworks/webpack/runtime/compat get default export","webpack://harvestworks/webpack/runtime/define property getters","webpack://harvestworks/webpack/runtime/global","webpack://harvestworks/webpack/runtime/hasOwnProperty shorthand","webpack://harvestworks/webpack/runtime/make namespace object","webpack://harvestworks/./src/header-with-radio/view.js"],"sourcesContent":["import { Howl, Howler } from 'howler';\n\nexport class Radio {\n\n    // Settings\n    VOLUME = 0.5;\n    ERROR_MESSAGE_TIMEOUT = 5000;\n    USER_MESSAGE_TIMEOUT = 1000;\n    PROGRESS_UPDATE_INTERVAL = 1000;\n    RESTART_VS_PREV_TIMEOUT = 2500;\n    PRE_MESSAGE_WAIT = 1000;\n\n    // Classname constants\n    IS_RADIO_ACTIVE_CLASSNAME = 'active';\n    IS_RADIO_PAUSED_CLASSNAME = 'pause';\n\n    // Local storage constants\n    RECOVERY_TIMESTAMP_KEY = 'radio-timestamp';\n    RECOVERY_SONG_URL_KEY = 'radio-file';\n    RECOVERY_PAUSE_STATE_KEY = 'radio-pause';\n    RECOVERY_ACTIVE_STATE_KEY = 'radio-active';\n    SONG_HISTORY_KEY = 'radio-listened';\n\n    trackList = [];\n    unplayedSongs = [];\n\n    /**\n     * @param {Window} window - The global window object.\n     * @param {Document} document - The global document object.\n     * @param {boolean} debug - if console should show log\n     */\n    constructor(window, document, debug) {\n        this.window = window;\n        this.document = document;\n        this.debug = debug;\n\n        this.interfaceUpdateIntervalId = null;\n\n        this.sound = null;\n\n        // Document hooks\n        this.elements = {\n            urlEl: document.querySelector('.audioFiles'),\n            containerEl: document.querySelector('.spacer'),\n            titleEl: document.querySelector('.title.radioPart'),\n            titleWrapperEl: document.querySelector('.titleWrapper'),\n            timeEl: document.querySelector('.time.radioPart'),\n            tooltipEl: document.querySelector('.radioTooltip'),\n\n            // Control hooks\n            buttonEl: document.querySelector('.radioButton'),\n            pauseEl: document.querySelector('.pause.radioPart'),\n            playEl: document.querySelector('.play.radioPart'),\n            skipEl: document.querySelector('.skip.radioPart'),\n            prevEl: document.querySelector('.prev.radioPart')\n        };\n\n        if (this.isRadioOpen)\n            this.isRadioOpen = true;\n\n        this.displayUserMessage('Loading...');\n\n        // Check for missing elements\n        for (const [key, value] of Object.entries(this.elements)) {\n            if (!value) {\n                this.displayErrorMessage(`Couldn't find radio element: ${key}`);\n            }\n        }\n\n        if (!Howler || !Howl) {\n            this.displayErrorMessage('Couldn\\'t activate player library.');\n        }\n        // Howler.autoUnlock = true;\n        Howler.html5PoolSize = 1000;\n\n        this.mediaTags = window.jsmediatags;\n        if (!this.mediaTags) {\n            this.displayErrorMessage('Couldn\\'t activate metadata library.');\n        }\n\n        this.parseAudioUrls();\n\n        // Load recovered song if unpaused\n        if (this.hasRecoveredSong()) {\n            if (this.isRadioOpen)\n                this.resumeRecoveredSong();\n        }\n\n        // Add interaction event listeners\n        this.elements.buttonEl.addEventListener('click', () => {\n            if (this.isRadioOpen) {\n                this.isRadioOpen = false;\n                this.pauseSong();\n            }\n            else {\n                this.isRadioOpen = true;\n                this.resumeSong();\n            }\n        });\n\n        this.elements.pauseEl.addEventListener('click', () => {\n            this.pauseSong();\n        });\n\n        this.elements.playEl.addEventListener('click', () => {\n            this.resumeSong();\n        });\n\n        this.elements.skipEl.addEventListener('click', () => {\n            this.nextSong();\n        });\n\n        this.elements.prevEl.addEventListener('click', () => {\n            this.prevSong();\n        });\n\n        this.window.addEventListener('resize', () => {\n            this.updateTitleScroll();\n        });\n    }\n\n    // Utilities\n\n    log(message) {\n        if (this.debug)\n            console.log('[RADIO] ' + message);\n    }\n\n    displayErrorMessage(message) {\n        this.log(message);\n\n        setTimeout(() => {\n            setTimeout(() => {\n                this.updateMetadataDisplay(this.recoveredSong);\n            }, this.ERROR_MESSAGE_TIMEOUT)\n\n            this.elements.titleEl.textContent = message;\n        }, this.PRE_MESSAGE_WAIT);\n    }\n\n    displayUserMessage(message) {\n        setTimeout(() => {\n            this.updateMetadataDisplay(this.recoveredSong);\n        }, this.USER_MESSAGE_TIMEOUT);\n\n        this.elements.titleEl.textContent = message;\n    }\n\n    // Setup\n\n    parseAudioUrls() {\n        let urls = this.elements.urlEl.textContent;\n\n        urls = atob(urls);\n\n        this.trackList = urls.split('\\n')\n            .filter((url) => // Filter whitespace\n                url.trim() !== ''\n            ).map((url) => // Remove mac-os-link markup\n                url.replaceAll(\"[audio src=\\\"\", \"\")\n                    .replaceAll(\"\\\" /]\", \"\")\n                    .trim()\n            ).map((url) => { // Switch to current host\n                if (url.startsWith('http')) {\n                    return this.window.location.origin + '/' + url.split('/').slice(3).join('/');\n                }\n            });\n\n\n        this.unplayedSongs = this.trackList.flat();\n\n        if (!this.trackList.length > 0) {\n            this.displayErrorMessage('No tracks are available to play.');\n        }\n    }\n\n    // Controls\n\n    hasRecoveredSong() {\n        return this.recoveredSong && this.recoveredTimestamp && this.recoveredSong.trim() != '' && this.recoveredTimestamp.trim() != '';\n    }\n\n    resumeRecoveredSong() {\n        if (!this.hasRecoveredSong())\n            return;\n\n        this.log('Found existing song ' + this.recoveredSong + (this.recoveredPauseState ? ' paused' : ' playing') + ' at ' + this.recoveredTimestamp);\n        this.isRadioOpen = true;\n        if (!this.trackList.includes(this.recoveredSong))\n            return this.log('Recovered song not found in track list.');\n\n        this.playSong(this.recoveredSong, this.recoveredTimestamp, !this.recoveredPauseState);\n\n        if (this.recoveredPauseState) {\n            this.isDisplayingPaused = true;\n            this.pauseSong();\n        }\n    }\n\n    playSong(url, time = 0, autoplay = false) {\n        if (this.sound)\n            this.sound.stop();\n\n        this.sound = new Howl({\n            src: url,\n            html5: true,\n            volume: this.VOLUME,\n            autoplay: autoplay\n        });\n\n        if (time != 0)\n            this.sound.seek(time);\n\n        if (autoplay)\n            this.isDisplayingPaused = false;\n        // this.displayUserMessage('Loading...', 0);\n\n        this.recoveredSong = url;\n        this.recoveredTimestamp = time;\n        this.recoveredPauseState = autoplay;\n\n        this.sound.on('unlock', () => {\n            this.log('Autoplay unlocked.');\n            // if (autoplay)\n            //     this.sound.play();\n        });\n\n        this.sound.once('load', () => {\n            this.log('Song loaded ' + this.sound._src);\n            this.updateMetadataDisplay(this.sound._src);\n        });\n\n        this.sound.on('loaderror', () => {\n            this.displayErrorMessage('Error loading track. Skipping...');\n            this.log('Error loading track ' + this.sound._src);\n\n            this.isDisplayingPaused = true;\n            this.playNextSong();\n        });\n\n        this.sound.on('mute', () => {\n            this.log('Audio muted.');\n        });\n\n        this.sound.on('pause', () => {\n            this.log('Song paused ' + this.sound._src + ' at ' + this.sound.seek());\n            this.isDisplayingPaused = true;\n            this.recoveredPauseState = true;\n\n            this.recoveredSong = this.sound._src;\n            this.recoveredTimestamp = this.sound.seek();\n            this.recoveredPauseState = true;\n            this.updateProgressDisplay();\n        });\n\n        this.sound.on('play', () => {\n            this.log('Song playing ' + this.sound._src + ' at ' + this.sound.seek());\n            this.isDisplayingPaused = false;\n            this.recoveredPauseState = false;\n\n            this.recoveredSong = this.sound._src;\n            this.recoveredTimestamp = this.sound.seek();\n            this.recoveredPauseState = false;\n\n            this.startProgressUpdateInterval();\n        });\n\n        this.sound.on('playerror', () => {\n            this.displayErrorMessage('Click play to resume. Enable autoplay for automatic playback.');\n            this.log('Playback error ' + this.sound._src + ' at ' + this.sound.seek());\n            this.isDisplayingPaused = true;\n        });\n\n        this.sound.on('rate', () => {\n            this.log('Playback rate altered.');\n        });\n\n        this.sound.on('seek', () => {\n            this.log('Song seeked ' + this.sound._src + ' to ' + this.sound.seek());\n\n            this.recoveredSong = this.sound._src;\n            this.recoveredTimestamp = this.sound.seek();\n\n            if (this.sound.seek() < this.sound._duration - 1)\n                this.updateProgressDisplay();\n\n            if (this.sound.seek() > this.sound._duration - 1 && !this.sound.playing()) {\n                this.recoveredSong = '';\n                this.recoveredTimestamp = 0;\n                this.addToSongHistory(this.sound._src);\n\n                this.playNextSong(true);\n            }\n        });\n\n        this.sound.on('stop', () => {\n            this.log('Song stopped ' + this.sound._src + ' at ' + this.sound.seek());\n\n            this.recoveredSong = this.sound._src;\n            this.recoveredTimestamp = this.sound.seek();\n            this.updateProgressDisplay();\n        });\n\n        this.sound.on('end', () => {\n            this.log('Song ended ' + this.sound._src + ' at ' + this.sound.seek());\n\n            this.recoveredSong = '';\n            this.recoveredTimestamp = 0;\n            this.addToSongHistory(this.sound._src);\n\n            this.playNextSong(true);\n        });\n\n        this.sound.on('volume', () => {\n            this.log('Volume altered.');\n        });\n    }\n\n    playNextSong(autoplay = true) {\n        this.songHistory.forEach((url) => {\n            const index = this.unplayedSongs.indexOf(url);\n            if (index != -1) {\n                this.unplayedSongs.splice(index, 1);\n            }\n\n            // this.log('Removed ' + url + ' from unplayed songs.');\n        });\n\n        // this.log('Remaining songs: ' + this.unplayedSongs);\n\n        if (this.unplayedSongs.length === 0) {\n            this.log('All audio files have been listened to. Restarting.');\n            this.unplayedSongs = this.trackList.flat();\n            this.songHistory = '';\n        }\n\n        const randomIndex = Math.floor(Math.random() * this.unplayedSongs.length)\n\n        this.playSong(this.unplayedSongs[randomIndex], 0, autoplay);\n    }\n\n    pauseSong() {\n        if (!this.sound)\n            return this.playNextSong(false);\n        if (!this.sound.playing())\n            return this.log('Couldn\\'t pause, already stopped');\n        this.sound.pause();\n    }\n\n    resumeSong() {\n        if (!this.sound && this.hasRecoveredSong())\n            return this.resumeRecoveredSong();\n        if (!this.sound)\n            return this.playNextSong(true);\n        if (this.sound && this.sound.playing())\n            return this.log('Couldn\\'t resume, already playing');\n        this.sound.play();\n    }\n\n    nextSong() {\n        if (!this.sound)\n            return this.playNextSong(true);\n        this.sound.seek(this.sound._duration - 0.1);\n    }\n\n    prevSong() {\n        const history = this.songHistory;\n        if ((this.sound && this.sound.seek() > this.RESTART_VS_PREV_TIMEOUT)) {\n            this.log('Seeking to start of song.');\n            return this.sound.seek(0);\n        }\n        if (!history || history.length === 0) {\n            this.log('No previous songs to play.');\n            return this.sound.seek(0);\n        }\n        this.log('Playing previous song ' + history[history.length - 1] + ' from ' + history);\n        this.playSong(history[history.length - 1], 0, true);\n        this.recoveredSong = '';\n        this.recoveredTimestamp = 0;\n        this.removeFromSongHistory(history[history.length - 1]);\n\n    }\n\n\n    // Metadata\n\n    updateMetadataDisplay(src) {\n\n        const self = this;\n\n        this.updateDurationDisplay();\n        this.mediaTags.read(src, {\n            onSuccess: function (tag) {\n                // Update main title display\n                if (self.debug)\n                    console.log('[RADIO] Found metadata: ', tag);\n                var album = '';\n                if (tag.tags.album)\n                    album = tag.tags.album;\n                if (tag.tags.year)\n                    album += '&nbsp;&nbsp;&nbsp;(' + tag.tags.year + ')';\n\n                self.elements.titleEl.innerHTML = tag.tags.title;\n                if (tag.tags.artist)\n                    self.elements.titleEl.innerHTML += '&nbsp;&nbsp;—&nbsp;&nbsp;' + tag.tags.artist;\n\n                const albumEl = self.document.createElement('span');\n                albumEl.innerHTML = album;\n                albumEl.classList.add('radioPart', 'album');\n                self.elements.titleEl.appendChild(albumEl);\n\n                // Update tooltip display\n                if (self.elements.tooltipEl) {\n                    self.elements.tooltipEl.innerHTML = '';\n\n\n                    const titleTooltip = self.document.createElement('p');\n                    titleTooltip.innerHTML = tag.tags.title + (tag.tags.artist ? ' by ' + tag.tags.artist : '');\n                    titleTooltip.style.fontSize = '18px';\n                    titleTooltip.style.fontWeight = 'bold';\n                    self.elements.tooltipEl.appendChild(titleTooltip);\n\n                    Object.keys(tag.tags).forEach((key) => {\n                        if (key === 'picture')\n                            return; // Skip picture tag\n                        if (!tag.tags[key].description || !tag.tags[key].data)\n                            return; // Skip empty tags\n\n\n                        const p = self.document.createElement('p');\n                        p.innerHTML = '<span style=\"opacity:0.6\"> ' + tag.tags[key].description + '</span> ' + tag.tags[key].data.replaceAll(' ', '&nbsp;');\n                        self.elements.tooltipEl.appendChild(p);\n                    });\n                    const disclaimerEl = self.document.createElement('p');\n                    disclaimerEl.style.lineHeight = '13px';\n                    disclaimerEl.style.paddingTop = '6px';\n                    disclaimerEl.style.paddingBottom = '4px';\n                    disclaimerEl.innerHTML = '<span style=\"opacity:1; font-size:12.5px;\">This radio explores archived recordings from the Harvestworks studio. We’ve made efforts to obtain express permission where possible. For questions, contact carol.parkinson@harvestworks.org</span>';\n                    self.elements.tooltipEl.appendChild(disclaimerEl);\n\n                }\n\n            },\n            onError: function (error) {\n                this.displayErrorMessage('No information found for this track.');\n                console.log('[RADIO] No information found for this track.', error.type, error.info);\n            }\n        });\n    }\n\n    updateTitleScroll() {\n        // this.log('Resizing title: ' + this.elements.titleWrapperEl.clientWidth < this.elements.titleEl.clientWidth);\n        if (this.elements.titleWrapperEl.clientWidth < this.elements.titleEl.clientWidth)\n            this.elements.titleEl.classList.add('scrolling');\n        else\n            this.elements.titleEl.classList.remove('scrolling');\n    }\n\n    updateDurationDisplay() {\n        if (!this.sound) {\n            this.elements.timeEl.textContent = this.elements.timeEl.textContent.split('/')[0] + '/ -:--';\n            return;\n        }\n\n        const seconds = this.sound._duration;\n        var displaySeconds = Math.floor(seconds % 60);\n        if (displaySeconds < 10)\n            displaySeconds = '0' + displaySeconds;\n\n        this.elements.timeEl.textContent = this.elements.timeEl.textContent.split('/')[0] + '/ ' + Math.floor(seconds / 60) + ':' + displaySeconds;\n    }\n\n    updateProgressDisplay() {\n        if (!this.sound) {\n            this.elements.timeEl.textContent = '-:-- /' + this.elements.timeEl.textContent.split('/')[1];\n            return;\n        }\n\n        const seconds = this.sound.seek();\n        var displaySeconds = Math.floor(seconds % 60);\n        if (displaySeconds < 10)\n            displaySeconds = '0' + displaySeconds;\n\n        this.elements.timeEl.textContent = Math.floor(seconds / 60) + ':' + displaySeconds + ' /' + this.elements.timeEl.textContent.split('/')[1];\n    }\n\n    startProgressUpdateInterval() {\n        this.stopProgressInterval();\n        this.updateProgressDisplay();\n        this.interfaceUpdateIntervalId = setInterval(() => {\n            this.recoveredSong = this.sound._src;\n            this.recoveredTimestamp = this.sound.seek();\n            this.updateProgressDisplay();\n        }, this.PROGRESS_UPDATE_INTERVAL);\n    }\n\n    stopProgressInterval() {\n        clearInterval(this.interfaceUpdateIntervalId);\n    }\n\n\n    // Radio state\n\n    get isRadioOpen() {\n        return this.window.sessionStorage.getItem(this.RECOVERY_ACTIVE_STATE_KEY) === 'true';\n    }\n\n    set isRadioOpen(bool) {\n        this.window.sessionStorage.setItem(this.RECOVERY_ACTIVE_STATE_KEY, bool);\n        if (bool)\n            this.elements.containerEl.classList.add(this.IS_RADIO_ACTIVE_CLASSNAME);\n        else\n            this.elements.containerEl.classList.remove(this.IS_RADIO_ACTIVE_CLASSNAME);\n    }\n\n    get isDisplayingPaused() {\n        this.elements.containerEl.classList.contains(this.IS_RADIO_PAUSED_CLASSNAME);\n    }\n\n    set isDisplayingPaused(bool) {\n        if (bool)\n            this.elements.containerEl.classList.add(this.IS_RADIO_PAUSED_CLASSNAME);\n        else\n            this.elements.containerEl.classList.remove(this.IS_RADIO_PAUSED_CLASSNAME);\n    }\n\n    // State recovery values\n\n    get songHistory() {\n        return (this.window.sessionStorage.getItem(this.SONG_HISTORY_KEY) ?? '').split('\\n').map((song) => song.trim()).filter((song) => song !== '');\n    }\n\n    set songHistory(str) {\n        this.window.sessionStorage.setItem(this.SONG_HISTORY_KEY, str.trim());\n    }\n\n    addToSongHistory(song) {\n        if (!song)\n            return this.log('Tried to add empty song to history.');\n        if (this.songHistory.includes(song)) {\n            this.log('Tried to add duplicate song to history.');\n            this.removeFromSongHistory(song);\n        }\n        this.songHistory = this.songHistory.join('\\n') + '\\n' + song.trim();\n        this.log('Added ' + song + ' to history: ' + this.songHistory);\n    }\n\n    removeFromSongHistory(song) {\n        const index = this.songHistory.lastIndexOf(song);\n        const history = this.songHistory.flat();\n        if (index !== -1) {\n            history.splice(index, 1)\n            this.songHistory = history.join('\\n');\n        }\n        this.log('Removed ' + song + ' from history: ' + this.songHistory);\n    }\n\n    get recoveredSong() {\n        return this.window.sessionStorage.getItem(this.RECOVERY_SONG_URL_KEY);\n    }\n\n    set recoveredSong(str = '') {\n        this.window.sessionStorage.setItem(this.RECOVERY_SONG_URL_KEY, str);\n    }\n\n    get recoveredTimestamp() {\n        return this.window.sessionStorage.getItem(this.RECOVERY_TIMESTAMP_KEY);\n    }\n\n    set recoveredTimestamp(str = '0') {\n        this.window.sessionStorage.setItem(this.RECOVERY_TIMESTAMP_KEY, str);\n    }\n\n    get recoveredPauseState() {\n        return this.window.sessionStorage.getItem(this.RECOVERY_PAUSE_STATE_KEY) === 'true';\n    }\n\n    set recoveredPauseState(bool) {\n        this.window.sessionStorage.setItem(this.RECOVERY_PAUSE_STATE_KEY, bool);\n    }\n}","/*!\n *  howler.js v2.2.4\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/(\\d+)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (!node.bufferSource) {\n        return self;\n      }\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.4\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Create a new panner node if one doesn't already exist.\n        var panner = sound._panner;\n        if (!panner) {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n          panner = sound._panner\n        }\n\n        // Update the panner values or create a new panner if none exists.\n        panner.coneInnerAngle = pa.coneInnerAngle;\n        panner.coneOuterAngle = pa.coneOuterAngle;\n        panner.coneOuterGain = pa.coneOuterGain;\n        panner.distanceModel = pa.distanceModel;\n        panner.maxDistance = pa.maxDistance;\n        panner.refDistance = pa.refDistance;\n        panner.rolloffFactor = pa.rolloffFactor;\n        panner.panningModel = pa.panningModel;\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Use this file for JavaScript code that you want to run in the front-end\n * on posts/pages that contain this block.\n *\n * When this file is defined as the value of the `viewScript` property\n * in `block.json` it will be enqueued on the front end of the site.\n *\n * Example:\n *\n * ```js\n * {\n *   \"viewScript\": \"file:./view.js\"\n * }\n * ```\n *\n * If you're not making any changes to this file because your project doesn't need any\n * JavaScript running in the front-end, then you should delete this file and remove\n * the `viewScript` property from `block.json`.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/#view-script\n */\n\n\nimport { Radio } from './radio';\n\nconst radio = new Radio(window, document, true);"],"names":["Howl","Howler","Radio","VOLUME","ERROR_MESSAGE_TIMEOUT","USER_MESSAGE_TIMEOUT","PROGRESS_UPDATE_INTERVAL","RESTART_VS_PREV_TIMEOUT","PRE_MESSAGE_WAIT","IS_RADIO_ACTIVE_CLASSNAME","IS_RADIO_PAUSED_CLASSNAME","RECOVERY_TIMESTAMP_KEY","RECOVERY_SONG_URL_KEY","RECOVERY_PAUSE_STATE_KEY","RECOVERY_ACTIVE_STATE_KEY","SONG_HISTORY_KEY","trackList","unplayedSongs","constructor","window","document","debug","interfaceUpdateIntervalId","sound","elements","urlEl","querySelector","containerEl","titleEl","titleWrapperEl","timeEl","tooltipEl","buttonEl","pauseEl","playEl","skipEl","prevEl","isRadioOpen","displayUserMessage","key","value","Object","entries","displayErrorMessage","html5PoolSize","mediaTags","jsmediatags","parseAudioUrls","hasRecoveredSong","resumeRecoveredSong","addEventListener","pauseSong","resumeSong","nextSong","prevSong","updateTitleScroll","log","message","console","setTimeout","updateMetadataDisplay","recoveredSong","textContent","urls","atob","split","filter","url","trim","map","replaceAll","startsWith","location","origin","slice","join","flat","length","recoveredTimestamp","recoveredPauseState","includes","playSong","isDisplayingPaused","time","autoplay","stop","src","html5","volume","seek","on","once","_src","playNextSong","updateProgressDisplay","startProgressUpdateInterval","_duration","playing","addToSongHistory","songHistory","forEach","index","indexOf","splice","randomIndex","Math","floor","random","pause","play","history","removeFromSongHistory","self","updateDurationDisplay","read","onSuccess","tag","album","tags","year","innerHTML","title","artist","albumEl","createElement","classList","add","appendChild","titleTooltip","style","fontSize","fontWeight","keys","description","data","p","disclaimerEl","lineHeight","paddingTop","paddingBottom","onError","error","type","info","clientWidth","remove","seconds","displaySeconds","stopProgressInterval","setInterval","clearInterval","sessionStorage","getItem","bool","setItem","contains","_this$window$sessionS","song","str","lastIndexOf","radio"],"sourceRoot":""}